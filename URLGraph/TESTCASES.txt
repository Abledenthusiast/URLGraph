Aaron PitmanTest Cases for Project 3Cout: A Love StoryD-level: When setting up simpleCurl, I simply printed out the page I was hoping to get.C-level: This part was interesting. Cout was also used a lot on this. Every time I went into the for loop (for each neighbor) I printed out the color, distance and actual string value of the node. This was a wall of text, but I could see if the algorithm was correct, for instance, for quite awhile the algorithm was grabbing already visited pages. This was an issue with ÒgrayÓ as opposed to white coloring B-level:  this part was a simple change in parameters, but a big heartache in implementing. To test this level, I set up a case: starting from a source page, I chose a word on the page for which I would search.  I then used the algorithm to see if it would find the word I clearly observed. In addition, later tests involved following links manually and keeping track of how far down I traveled. I would then set the number of levels equal to how far I traveled from the source page. Once I was reasonably sure the algorithm was working, I searched for words I had not preselected. I then followed my printed out path to double check correctness. A-level: I donÕt know what to put here. My parser works? I tested this by searching for words right after a closing tag such as >Kansas<	